#include <SFML/Graphics.hpp>
#include <iostream>
#include <sstream>
#include "Entity.h"
#include "Pacman.h"
#include "Enemy.h"
#include "map.h" //подключили код с картой
#include <list>
using namespace sf;//включаем пространство имен sf, чтобы постоянно не писать sf::

void randomMapGenerate(){
//рандомно расставляем камни
int randomElementX = 0;//переменная для хранения случайного элемента по горизонтали
int randomElementY = 0;//переменная для хранения случайного элемента по вертикали
srand(time(0));//Инициализация генератора случайных чисел
int countStone = 3;//количество таблеток
while (countStone>0)
{ 
	randomElementX = 1 + rand() % (WIDTH_MAP - 1);//псевдослучайное значение по “x” от 1 до 
//ширина карты-1. Ограничение введено чтобы не получать числа бордюра карты 
randomElementY = 1 + rand() % (HEIGHT_MAP - 1);//по “y”
if (TileMap[randomElementY][randomElementX] == ' ') {
	//если встретили символ пробел, 
	TileMap[randomElementY][randomElementX] = 'h'; //то ставим туда таблетку.
	countStone--; 
}
}
};


void randomMapGenerate1(){
//рандомно расставляем камни
int randomElementX = 0;//переменная для хранения случайного элемента по горизонтали
int randomElementY = 0;//переменная для хранения случайного элемента по вертикали
srand(time(0));//Инициализация генератора случайных чисел
int countStone = 3;//количество таблеток
while (countStone>0)
{ 
	randomElementX = 1 + rand() % (WIDTH_MAP - 1);//псевдослучайное значение по “x” от 1 до 
//ширина карты-1. Ограничение введено чтобы не получать числа бордюра карты 
randomElementY = 1 + rand() % (HEIGHT_MAP - 1);//по “y”
if (TileMap[randomElementY][randomElementX] == ' ') {
	//если встретили символ пробел, 
	TileMap[randomElementY][randomElementX] = 'f'; //то ставим туда таблетку.
	countStone--; 
}
}
};
				

int main() 
{
	//Создаём окно 
	sf::VideoMode desktop = sf::VideoMode::getDesktopMode();
	sf::RenderWindow window(sf::VideoMode(800, 600, desktop.bitsPerPixel), "Pacman");

	//Font font;
	//font.loadFromFile("Cyrilicold.ttf");
	//Text text("",font,20);
	//text.setColor(Color::Red);//покрасили текст в красный 
	//text.setStyle(Text::Bold);//жирный текст. 
 
 


	Image map_image;//объект изображения для карты 
	map_image.loadFromFile("images/Lanshaft 555.png");//загружаем файл для карты
	
	Texture map;//текстура карты 
	map.loadFromImage(map_image);//заряжаем текстуру картинкой
	Sprite s_map;//создаём спрайт для карты 
	s_map.setTexture(map);//заливаем текстуру спрайтом
	
	Clock clock; //создаем переменную времени и одновременно запускаем часы!
	Clock gameTimeClock;//переменная игрового времени, будем здесь хранить время игры 
	int gameTime = 0;//объявили игровое время, инициализировали.
	
	Image PacmanImage;
	PacmanImage.loadFromFile("images/Pacman.png"); // загружаем изображение игрока
	
	Image EnemyImageSh1;
	EnemyImageSh1.loadFromFile("images/PSH1.png");

	Pacman p(PacmanImage, 80, 80, 40.0, 40.0,"Packman");//создаем объект p класса player, задаем "hero.png" как имя файла+расширение, далее координата Х,У, ширина, высота.
	//Enemy Psh1(EnemyImageSh1, 40, 40, 40.0, 40.0,"PSH1");
	std::list<Entity*> enemies;
	std::list<Entity*>::iterator it;

	const int ENEMY_COUNT = 3; //максимальное количество врагов в игре 
	int enemiesCount = 0; 

	for (int i = 0; i < ENEMY_COUNT; i++) 
		{ 
			float xr = 150 + rand() % 500; // случайная координата врага на поле игры по оси “x” 
			float yr = 150 + rand() % 350; // случайная координата врага на поле игры по оси “y”  
			//создаем врагов и помещаем в список  
			enemies.push_back(new Enemy(EnemyImageSh1, xr, yr, 40, 40, "EnemyImageSh1"));  
			enemiesCount += 1; //увеличили счётчик врагов 
	} 


	
	
	//Image EnemyImageSh2;
	//Image EnemyImageSh3;

	
	
	//EnemyImageSh2.loadFromFile("images/PSH2.png");
	//EnemyImageSh3.loadFromFile("images/PSH3.png");

	
	
	//Enemy Psh1(EnemyImage, 80, 80, 40.0, 40.0,"PSH1");
	//Enemy Psh2(EnemyImage, 80, 80, 40.0, 40.0,"PSH2");
	//Enemy Psh3(EnemyImage, 80, 80, 40.0, 40.0,"PSH3");


	int createObjectForMapTimer = 0;//Переменная под время для генерирования камней
	int createObjectForMapTimer1 = 0;//Переменная под время для генерирования камней
	while (window.isOpen())
	{
		float time = clock.getElapsedTime().asMicroseconds();
		if (p.life) gameTime = gameTimeClock.getElapsedTime().asSeconds();//игровое время в 
		//секундах идёт вперед, пока жив игрок. Перезагружать как time его не надо. 
		//оно не обновляет логику игры
		clock.restart(); 
		time = time / 800;


		createObjectForMapTimer += time;//наращиваем таймер
		if (createObjectForMapTimer>2000)
		{ 
			randomMapGenerate();//генерация камней
			createObjectForMapTimer = 0;//обнуляем таймер
		}

		createObjectForMapTimer1 += time;//наращиваем таймер
		if (createObjectForMapTimer1>3000)
		{ 
			randomMapGenerate1();//генерация камней
			createObjectForMapTimer1 = 0;//обнуляем таймер
		}
		sf::Event event; 
		while (window.pollEvent(event)) 
		{
			if (event.type == sf::Event::Closed) 
				window.close(); 
		}
		
		
		
		
		p.update(time);//оживляем объект “p” класса “Player” с помощью времени sfml, // передавая время в качестве параметра функции update.
		
		for  (it = enemies.begin(); it != enemies.end(); it++)   
			{   
				(*it)->update(time); //запускаем метод update()  
			} 

	if (p.life == true)
	{//если игрок жив  
		for (it = enemies.begin(); it != enemies.end(); it++)
				{//бежим по списку врагов   
					if ((p.getRect().intersects((*it)->getRect())) && ((*it)->name == "Psh1"))     
						{      
							p.health = 0;      
								std::cout << "you are lose";     
							}    
					}   
			} 
		
		window.clear(); 

		/////////////////////////////Рисуем карту/////////////////////
		for (int i = 0; i < HEIGHT_MAP; i++)
			for (int j = 0; j < WIDTH_MAP; j++)
				{ 
					if (TileMap[i][j] == ' ') 
						s_map.setTextureRect(IntRect(0, 0, 40, 40)); //если
					//встретили символ пробел, то рисуем 1-й квадратик 
					if (TileMap[i][j] == 's') 
						s_map.setTextureRect(IntRect(40, 0, 40, 40));//если
					//встретили символ s, то рисуем 2й квадратик
					if ((TileMap[i][j] == '0')) 
						s_map.setTextureRect(IntRect(80, 0, 40, 40));//если
					//встретили символ 0, то рисуем 3й квадратик
					if ((TileMap[i][j] == 'f')) 
				
					s_map.setTextureRect(IntRect(120, 0, 40, 40));
					
				
					if ((TileMap[i][j] == 'h')) 
						s_map.setTextureRect(IntRect(200, 0, 40, 40));
						s_map.setPosition(j * 40, i * 40);//раскладываем квадратики в карту.
						window.draw(s_map);//рисуем квадратики на экран
			}


		window.draw(p.sprite);//выводим спрайт на экран
		
		for (it = enemies.begin(); it != enemies.end(); it++)
		{ 
			//if ((*it)->life) //если враги живы
			window.draw((*it)->sprite); //рисуем enemies объекты 
			}
		
		window.display(); 
	}
return 0;

}